version: "3.9"

services:

  arches_db:
    container_name: arches_db
    image: postgis/postgis:14-3.2
    env_file:
      - ./.env
    environment:
      - PGUSER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgis
      - POSTGRES_MULTIPLE_EXTENSIONS=postgis,postgis_topology
    restart: always
    volumes:
        - postgres-data:/var/lib/postgresql/data/
        - postgres-log:/var/log/postgresql
        - ./init-unix.sql:/docker-entrypoint-initdb.d/init.sql # to set up the DB template
    ports:
      - '5434:5432'
    networks:
      - arches_net

  arches_elasticsearch:
    container_name: arches_elasticsearch
    image: elasticsearch:8.5.3
    restart: always
    env_file:
      - ./.env
    environment:
      - TZ="${TZ}"
      - xpack.security.enabled=false
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms400m -Xmx400m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9202:9200"
      - "9302:9300"
    networks:
      - arches_net

  arches_rabbitmq:
    container_name: rabbitmq3
    image: rabbitmq:3-management
    hostname: my-rabbit
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/mnesia/rabbit@my-rabbit
      - rabbitmq-logs:/var/log/rabbitmq/log
    ports:
      - 5674:5672
      - 15674:15672
    networks:
      - arches_net

  arches:
    container_name: arches
    image: arches
    env_file:
      - ./.env
    build:
      context: .
      dockerfile: arches/Dockerfile
      args:
        ARCHES_PROJECT: ${ARCHES_PROJECT}
        ARCHES_ROOT: ${ARCHES_ROOT}
        APP_ROOT: ${APP_ROOT}
        APP_COMP_FOLDER: ${APP_COMP_FOLDER}
    environment:
      - DEBUG="${DJANGO_DEBUG}"
      - ARCHES_PROJECT=${ARCHES_PROJECT}
    stdin_open: true # docker run -i
    tty: true        # docker run -t
    ports:
      - "5432:5432"
      - "8983:8983"
      - 8004:8000
      - 5678:5678
      - 5984:5984
    depends_on:
      - arches_db
      - arches_elasticsearch
      - arches_rabbitmq
    command:
      - run_arches
    expose:
      - 8004:8000
    volumes:
      - arches-log:/web_root/logs
      - arches-static:/static_root
      - arches-app:/arches_app
      - ../arches_data/:/web_root/arches_data
    networks:
      - arches_net

  webpack:
    container_name: arches_webpack
    image: arches/arches_webpack
    env_file:
      - ./.env
    build:
      context: .
      dockerfile: webpack/Dockerfile
      args:
        ARCHES_PROJECT: ${ARCHES_PROJECT}
        ARCHES_ROOT: ${ARCHES_ROOT}
        APP_ROOT: ${APP_ROOT}
        APP_COMP_FOLDER: ${APP_COMP_FOLDER}
    command: run_webpack
    volumes:
      - arches-app:/arches_app
      - arches-static:/static_root
    ports:
      - 8021:8021
      - 8080:8080
    expose:
      - 8080:8080
    stdin_open: true
    tty: true
    depends_on:
      - arches
    networks:
      - arches_net

  nginx:
    container_name: nginx
    build: ./nginx
    image: arches_via_docker/nginx
    env_file:
      - ./.env
    environment:
      - DOMAINS="${DOMAINS}"
      - DEPLOY_HOST="${DEPLOY_HOST}"
      - CERT_PATH="${CERT_PATH}"
      - DJANGO_PORT="${DJANGO_PORT}"
    volumes:
      - nginx-log:/logs/nginx
      - nginx_ssl:/etc/nginx/ssl
      - certbot_certs:/etc/letsencrypt
      - arches_certbot:$CERT_PATH
      - arches-static:/static_root
      - ./html:$NGINX_HTML_PATH
    ports:
      - "80:80"
      - "443:443"
    restart: always
    depends_on:
      - arches
    networks:
      - arches_net

  certbot:
    container_name: certbot
    build: ./certbot
    image: arches_oc/certbot
    env_file:
      - ./.env
    volumes:
      - certbot_certs:/etc/letsencrypt
      - arches_certbot:$CERT_PATH
    networks:
      - arches_net

  cron:
    container_name: cron
    build: ./cron
    image: arches_via_docker/cron
    environment:
      COMPOSE_PROJECT_NAME: "${COMPOSE_PROJECT_NAME}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/workdir:ro
    restart: unless-stopped
    networks:
      - arches_net

networks:
  arches_net:
    driver: bridge
    name: arches_net

volumes:
  logs_nginx:
    external: true
  nginx_ssl:
    external: true
  certbot_certs:
    external: true
  arches_certbot:
    external: true
  couchdb-data:
  couchdb-log:
  postgres-data:
  postgres-log:
  elasticsearch-data:
  rabbitmq-logs:
  rabbitmq-data:
  arches-log:
  arches-static:
  arches-app:
  nginx-log:
